var searchIndex = JSON.parse('{\
"parquet2":{"doc":"","t":[16,8,16,10,11,11,11,0,11,0,0,11,11,11,11,10,11,11,11,0,11,11,0,11,0,0,11,11,11,0,11,11,0,0,13,4,13,13,13,13,13,13,13,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,13,13,13,13,13,4,13,13,13,13,0,11,11,5,11,11,0,0,0,11,11,11,5,11,0,11,0,11,11,11,11,11,0,0,17,3,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,5,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,5,11,11,11,11,11,11,11,11,11,11,11,3,13,3,4,3,13,5,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,3,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,13,13,4,13,13,13,13,13,4,6,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,3,3,4,3,6,3,3,13,4,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,3,3,3,4,13,13,13,3,13,4,8,3,3,13,13,13,13,8,13,3,4,3,13,4,4,3,3,13,13,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,12,12,10,11,11,11,12,12,11,11,11,12,10,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,12,12,11,11,11,11,10,11,11,11,5,11,11,11,10,11,11,11,12,12,11,5,5,5,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,3,8,3,3,16,13,16,8,6,3,3,13,4,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,10,11,11,5,11,11,11,11,11,11,11,11,10,11,11,11,11,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,5,13,13,4,13,3,11,11,11,11,11,11,11,11,11,12,11,11,12,11,11,11,11,11,11,11,11,0,0,12,12,11,11,12,11,12,11,12,12,11,11,11,11,11,11,11,11,12,11,11,12,0,11,11,5,12,18,13,18,3,13,13,13,13,13,18,13,13,3,13,13,18,13,18,18,13,13,4,13,18,18,18,13,13,13,13,13,13,13,13,3,13,13,13,13,13,4,13,13,13,13,13,13,4,4,4,13,13,13,13,13,13,3,4,13,13,3,3,13,13,13,13,13,13,13,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,12,5,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,3,3,3,3,3,8,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,5,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,10,11,11,11,11,12,12,12,12,12,11,10,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,16,8,18,5,10,5,10,10,3,3,3,3,3,3,6,13,13,4,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12],"n":["Error","FallibleStreamingIterator","Item","advance","all","any","by_ref","compression","count","encoding","error","filter","find","for_each","fuse","get","map","map_err","map_ref","metadata","next","nth","page","position","read","schema","size_hint","skip","skip_while","statistics","take","take_while","types","write","Brotli","Compression","Gzip","Lz4","Lz4Raw","Lzo","Snappy","Uncompressed","Zstd","borrow","borrow_mut","clone","clone_into","compress","decompress","eq","fmt","from","hash","into","to_owned","try_from","try_from","try_into","type_id","BitPacked","ByteStreamSplit","DeltaBinaryPacked","DeltaByteArray","DeltaLengthByteArray","Encoding","Plain","PlainDictionary","Rle","RleDictionary","bitpacking","borrow","borrow_mut","ceil8","clone","clone_into","delta_bitpacked","delta_byte_array","delta_length_byte_array","eq","fmt","from","get_length","hash","hybrid_rle","into","plain_byte_array","to_owned","try_from","try_from","try_into","type_id","uleb128","zigzag_leb128","BLOCK_LEN","Decoder","borrow","borrow_mut","clone","clone_into","encode","encode_pack","fmt","from","into","into_iter","new","next","size_hint","to_owned","try_from","try_into","type_id","Decoder","borrow","borrow_mut","consumed_bytes","encode","fmt","from","into","into_iter","new","next","size_hint","try_from","try_into","type_id","Decoder","borrow","borrow_mut","fmt","from","into","into_iter","into_lengths","new","next","try_from","try_into","type_id","Decoder","borrow","borrow_mut","encode","fmt","from","into","into_iter","into_values","new","next","try_from","try_into","type_id","values","BitmapIter","Bitpacked","Decoder","HybridEncoded","HybridRleDecoder","Rle","bitpacked_encode","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","encode_bool","encode_u32","eq","fmt","fmt","fmt","from","from","from","from","into","into","into","into","into_iter","into_iter","into_iter","ne","new","new","new","next","next","next","num_bits","size_hint","size_hint","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","0","0","1","Decoder","borrow","borrow_mut","fmt","from","into","into_iter","new","next","size_hint","try_from","try_into","type_id","decode","encode","decode","encode","Brotli","External","Feature","FeatureNotActive","General","Gzip","Lz4","OutOfSpec","ParquetError","Result","Snappy","Zstd","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","eq","fmt","fmt","fmt","from","from","from","from","from","hash","into","into","to_owned","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","0","0","0","0","1","1","ColumnChunkMetaData","ColumnDescriptor","ColumnOrder","FileMetaData","KeyValue","RowGroupMetaData","SchemaDescriptor","Signed","SortOrder","TypeDefinedOrder","Undefined","Undefined","Unsigned","base_type","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","byte_range","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","column","column","column_encoding","column_order","column_orders","columns","columns","compressed_size","compressed_size","compression","created_by","data_page_offset","descriptor","dictionary_page_offset","eq","eq","eq","fields","file_offset","file_path","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","get_sort_order","has_index_page","index_page_offset","into","into","into","into","into","into","into","into_thrift","into_thrift","into_thrift","key_value_metadata","key_value_metadata","max_def_level","max_rep_level","name","name","ne","ne","new","new","new","new","new","num_columns","num_columns","num_rows","num_rows","num_values","path_in_schema","physical_type","physical_type","row_groups","schema","schema_descr","sort_order","statistics","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","total_byte_size","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from_message","try_from_thrift","try_from_thrift","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_","type_","type_id","type_id","type_id","type_id","type_id","type_id","type_id","uncompressed_size","version","0","BinaryPageDict","CompressedDataPage","CompressedDictPage","CompressedPage","Data","Data","Data","DataPage","DataPage","DataPageHeader","DataPageHeaderExt","DataPageHeaderV1","DataPageHeaderV2","DataPageV2","Dict","Dict","Dict","DictPage","DictionaryPage","EncodedDictPage","EncodedPage","FixedLenByteArrayPageDict","IndexPage","Page","PageType","ParquetPageHeader","PrimitivePageDict","V1","V2","as_any","as_any","as_any","as_any","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","buffer","buffer_mut","buffer_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","compressed_page_size","compressed_size","compression","crc","data_page_header","data_page_header_v2","definition_level_encoding","definition_level_encoding","definition_level_encoding","definition_level_encoding","definition_level_encoding","definition_levels_byte_length","descriptor","descriptor","dictionary_page","dictionary_page_header","encoding","encoding","encoding","encoding","encoding","encoding","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","hash","hash","hash","hash","header","header","index_page_header","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","is_compressed","is_compressed","ne","ne","ne","new","new","new","new","new","new","new","new","new","new","num_nulls","num_rows","num_values","num_values","num_values","num_values","num_values","offsets","partial_cmp","partial_cmp","partial_cmp","physical_type","physical_type","physical_type","physical_type","read_dict_page","read_from_in_protocol","read_from_in_protocol","read_from_in_protocol","repetition_level_encoding","repetition_level_encoding","repetition_level_encoding","repetition_level_encoding","repetition_level_encoding","repetition_levels_byte_length","size","split_buffer","split_buffer_v1","split_buffer_v2","statistics","statistics","statistics","statistics","stream_from_in_protocol","stream_from_in_protocol","stream_from_in_protocol","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","uncompressed_page_size","uncompressed_size","values","values","values","write_to_out_protocol","write_to_out_protocol","write_to_out_protocol","write_to_out_stream_protocol","write_to_out_stream_protocol","write_to_out_stream_protocol","0","0","0","0","0","0","0","0","BasicDecompressor","ColumnChunkIter","ColumnIterator","Decompressor","Error","Finished","Item","MutStreamingIterator","PageFilter","PageIterator","ReadColumnIterator","Some","State","advance","advance","advance","advance","advance","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","decompress","field","field","field","filter_row_groups","fmt","fmt","from","from","from","from","from","from","get","get","get","get","get","get_column_iterator","get_field_columns","get_page_iterator","get_page_stream","into","into","into","into","into","into","into_buffer","into_buffers","into_inner","into_inner","into_iter","levels","new","new","new","new","new","next","read_metadata","read_metadata_async","reuse_buffer","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","0","0","get_bit_width","Optional","Repeated","Repetition","Required","SchemaElement","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","converted_type","eq","eq","field_id","fmt","fmt","from","from","hash","hash","into","into","io_message","io_thrift","logical_type","name","ne","new","num_children","partial_cmp","precision","read_from_in_protocol","repetition_type","scale","stream_from_in_protocol","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","type_","type_id","type_id","type_length","types","write_to_out_protocol","write_to_out_stream_protocol","from_message","0","BOOLEAN","BSON","BYTE_ARRAY","BasicTypeInfo","Boolean","Bson","ByteArray","DATE","DECIMAL","DOUBLE","Date","Decimal","DecimalType","Double","ENUM","ENUM_VALUES","Enum","FIXED_LEN_BYTE_ARRAY","FLOAT","FixedLenByteArray","Float","GroupConvertedType","GroupType","INT32","INT64","INT96","INTEGER","Int16","Int32","Int32","Int64","Int64","Int8","Int96","IntType","Interval","JSON","Json","LIST","List","LogicalType","MAP","MICROS","MILLIS","Map","MapKeyValue","NANOS","ParquetType","PhysicalType","PrimitiveConvertedType","PrimitiveType","STRING","TIME","TIMESTAMP","TimeMicros","TimeMillis","TimeType","TimeUnit","TimestampMicros","TimestampMillis","TimestampType","Type","UNKNOWN","UUID","Uint16","Uint32","Uint64","Uint8","Utf8","bit_width","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","check_contains","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","cmp","cmp","converted_to_group_converted","converted_to_primitive_converted","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_converted","from_physical","get_basic_info","group_converted_converted_to","hash","hash","hash","hash","hash","hash","hash","id","into","into","into","into","into","into","into","into","into","into","into","into","is_adjusted_to_u_t_c","is_adjusted_to_u_t_c","is_root","is_root","is_signed","name","name","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","new","new","new","new","new","new_root","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","physical_type_to_type","precision","primitive_converted_to_converted","read_from_in_protocol","read_from_in_protocol","read_from_in_protocol","read_from_in_protocol","read_from_in_protocol","read_from_in_protocol","read_from_in_protocol","repetition","scale","stream_from_in_protocol","stream_from_in_protocol","stream_from_in_protocol","stream_from_in_protocol","stream_from_in_protocol","stream_from_in_protocol","stream_from_in_protocol","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_thrift","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from_group","try_from_primitive","try_from_thrift","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_to_physical_type","unit","unit","write_to_out_protocol","write_to_out_protocol","write_to_out_protocol","write_to_out_protocol","write_to_out_protocol","write_to_out_protocol","write_to_out_protocol","write_to_out_stream_protocol","write_to_out_stream_protocol","write_to_out_stream_protocol","write_to_out_stream_protocol","write_to_out_stream_protocol","write_to_out_stream_protocol","write_to_out_stream_protocol","0","0","0","0","0","0","0","0","0","0","0","0","0","basic_info","basic_info","converted_type","converted_type","fields","logical_type","logical_type","physical_type","0","0","1","0","0","0","BinaryStatistics","BooleanStatistics","FixedLenStatistics","ParquetStatistics","PrimitiveStatistics","Statistics","as_any","as_any","as_any","as_any","as_any","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","default","descriptor","descriptor","descriptor","deserialize_statistics","distinct_count","distinct_count","distinct_count","distinct_count","distinct_count","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","hash","into","into","into","into","into","max","max_value","max_value","max_value","max_value","max_value","min","min_value","min_value","min_value","min_value","min_value","ne","ne","ne","ne","ne","new","null_count","null_count","null_count","null_count","null_count","null_count","null_count","null_count","null_count","null_count","partial_cmp","physical_type","physical_type","physical_type","physical_type","physical_type","read_from_in_protocol","serialize_statistics","stream_from_in_protocol","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","write_to_out_protocol","write_to_out_stream_protocol","Bytes","NativeType","TYPE","decode","from_le_bytes","int96_to_i64_ns","ord","to_le_bytes","ColumnOffsetsMetadata","Compressor","DynIter","DynStreamingIterator","FileStreamer","FileWriter","RowGroupIter","V1","V2","Version","WriteOptions","advance","advance","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","calc_row_group_file_offset","clone","clone","clone_into","clone_into","compress","compression","data_page_offset","dictionary_page_offset","end","end","eq","eq","fmt","fmt","from","from","from","from","from","from","from","from","from_column_chunk","from_column_chunk_metadata","get","get","hash","hash","into","into","into","into","into","into","into","into","into_iter","ne","new","new","new","new","new","new_from_vec","next","options","options","schema","schema","size_hint","size_hint","start","start","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","version","write","write","write_statistics"],"q":["parquet2","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","parquet2::compression","","","","","","","","","","","","","","","","","","","","","","","","","parquet2::encoding","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","parquet2::encoding::bitpacking","","","","","","","","","","","","","","","","","","","parquet2::encoding::delta_bitpacked","","","","","","","","","","","","","","","parquet2::encoding::delta_byte_array","","","","","","","","","","","","","parquet2::encoding::delta_length_byte_array","","","","","","","","","","","","","","","parquet2::encoding::hybrid_rle","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","parquet2::encoding::hybrid_rle::HybridEncoded","","","parquet2::encoding::plain_byte_array","","","","","","","","","","","","","parquet2::encoding::uleb128","","parquet2::encoding::zigzag_leb128","","parquet2::error","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","parquet2::error::ParquetError","","","","","","parquet2::metadata","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","parquet2::metadata::ColumnOrder","parquet2::pageparquet2::page::CompressedPage","","parquet2::page::DataPageHeader","","parquet2::page::EncodedPage","","parquet2::page::Page","","parquet2::read","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","parquet2::read::State","","parquet2::read::levels","parquet2::schema","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","parquet2::schema::io_message","parquet2::schema::typesparquet2::schema::types::LogicalType","","","","","","","","","","","","","parquet2::schema::types::ParquetType","","","","","","","","parquet2::schema::types::PhysicalType","parquet2::schema::types::PrimitiveConvertedType","","parquet2::schema::types::TimeUnit","","","parquet2::statistics","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","parquet2::types","","","","","","","","parquet2::write","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["The error type of iteration.","A fallible, streaming iterator.","The type being iterated over.","Advances the iterator to the next position.","Determines if all elements of the iterator satisfy a …","Determines if any elements of the iterator satisfy a …","Borrows an iterator, rather than consuming it.","","Returns the number of remaining elements in the iterator.","","Unofficial implementation of parquet IO in Rust.","Returns an iterator which filters elements by a predicate.","Returns the first element of the iterator which satisfies …","Calls a closure on each element of an iterator.","Returns an iterator which is well-behaved at the beginning …","Returns the current element.","Returns an iterator which applies a transform to elements.","Returns an iterator that applies a transform to errors.","Returns an iterator which applies a transform to elements.","","Advances the iterator, returning the next element.","Returns the <code>nth</code> element of the iterator.","","Returns the position of the first element matching a …","","","Returns bounds on the number of remaining elements in the …","Returns an iterator which skips the first <code>n</code> elements.","Returns an iterator which skips the first sequence of …","","Returns an iterator which only returns the first <code>n</code> …","Returns an iterator which only returns the first sequence …","","","","","","","","","","","","","","","","Compresses data stored in slice <code>input_buf</code> and writes the …","Decompresses data stored in slice <code>input_buf</code> and writes …","","","","","","","","","","","Bit packed encoding.  This can only be used if the data …","Encoding for floating-point data. K byte-streams are …","Delta encoding for integers. This can be used for int …","Incremental-encoded byte array. Prefix lengths are encoded …","Encoding for byte arrays to separate the length values and …","","Default encoding. BOOLEAN - 1 bit per value. 0 is false; 1 …","Deprecated: Dictionary encoding. The values in the …","Group packed run length encoding. Usable for …","Dictionary encoding: the ids are encoded using the RLE …","","","","Returns the ceil of value/divisor","","","","","","","","","Panics","","","","","","","","","","","","","","","","","","Encodes <code>u32</code> values into a buffer using <code>num_bits</code>.","Encodes <code>u32</code> values into a buffer using <code>num_bits</code>.","","","","","","","","","","","","Decoder of parquets’ <code>DELTA_BINARY_PACKED</code>. Implements …","","","Returns the total number of bytes consumed up to this …","Encodes an iterator of <code>i32</code> according to parquet’s …","","","","","","","","","","","Decodes according to Delta strings, prefixes, lengths and …","","","","","","","","","","","","","Decodes Delta-length byte array lengths and values.","","","Encodes a clonable iterator of <code>&amp;[u8]</code> into <code>buffer</code>. This …","","","","","Consumes this decoder and returns the slice of …","","","","","","Returns the slice of concatenated values.","An iterator of bits according to the LSB format","A bitpacked slice. The consumer must know its bit-width to …","An iterator that, given a slice of bytes, returns …","","","A RLE-encoded slice. The first attribute corresponds to …","Writes an iterator of bools into writer, with LSB first.","","","","","","","","","","","","","the bitpacked part of the encoder.","RLE-hybrid encoding of <code>u32</code>. This currently only yields …","","","","","","","","","","","","","","","","","","","","","","","Returns the number of bits being used by this decoder.","","","","","","","","","","","","","","","","","","","","Decodes according to Plain strings, prefixes, lengths and …","","","","","","","","","","","","","","Encodes <code>value</code> in ULEB128 into <code>container</code>. The exact number …","","","","","List of features whose non-activation may cause a runtime …","Error presented when trying to use a code branch that …","General Parquet error.","","","When the parquet file is known to be out of spec.","Errors generated by this crate","A specialized <code>Result</code> for Parquet errors.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Metadata for a column chunk.","A descriptor for leaf-level primitive columns. This …","Column order that specifies what method was used to …","Metadata for a Parquet file.","","Metadata for a row group.","A schema descriptor. This encapsulates the top-level …","Signed (either value or legacy byte-wise) comparison.","Sort order for page and column statistics.","Column uses the order defined by its logical or physical …","Undefined column order, means legacy behaviour before …","Comparison is undefined.","Unsigned (depending on physical type either value or …","","","","","","","","","","","","","","","","Returns the offset and length in bytes of the column chunk …","","","","","","","","","","","","","","","Returns column chunk metadata for <code>i</code>th column.","Returns <code>ColumnDescriptor</code> for a field position.","Returns the encoding for this column","Returns column order for <code>i</code>th column in this file. If …","Column (sort) order used for <code>min</code> and <code>max</code> values of each …","Returns slice of column chunk metadata.","Returns slice of <code>ColumnDescriptor</code>.","Returns the total compressed data size of this column …","Total size of all compressed column data in this row group.","<code>Compression</code> for this column.","String message for application that wrote this file.","Returns the offset for the column data.","The <code>ColumnDescriptor</code> for this column. This descriptor …","Returns the offset for the dictionary page, if any.","","","","","Byte offset in <code>file_path()</code>.","File where the column chunk is stored.","","","","","","","","","","","","","","","Returns sort order for a physical/logical type.","Returns <code>true</code> if this column chunk contains a index page, …","Returns the offset for the index page.","","","","","","","","Method to convert to Thrift.","","Method to convert to Thrift.","returns the metadata","key_value_metadata of this file.","Returns maximum definition level for this column.","Returns maximum repetition level for this column.","Returns column name.","Returns schema name.","","","Create a new <code>ColumnChunkMetaData</code>","Creates new descriptor for leaf-level column.","Creates new file metadata.","Create a new <code>RowGroupMetaData</code>","Creates new schema descriptor from Parquet schema.","Number of columns in this row group.","Returns number of leaf-level columns.","Number of rows in this row group.","number of rows in the file.","Total number of values in this column chunk.","","The <code>ColumnDescriptor</code> for this column. This descriptor …","Returns self type <code>PhysicalType</code> for this leaf column.","The row groups of this file","Returns the [’SchemaDescriptor`] that describes schema …","schema descriptor.","Returns sort order associated with this column order.","Decodes the raw statistics into a statistics","","","","","","","","Total byte size of all uncompressed column data in this …","","","","","","","","","Method to convert from Thrift.","Method to convert from Thrift.","","","","","","","","Type of this column. Must be primitive.","Returns self type <code>ParquetType</code> for this leaf column.","","","","","","","","Returns the total uncompressed data size of this column …","version of this file.","","","A <code>CompressedDataPage</code> is compressed, encoded representation …","An encoded and compressed dictionary page.","A <code>CompressedPage</code> is a compressed, encoded representation …","","","","A <code>DataPage</code> is an uncompressed, encoded representation of a …","","","","Data page header","New page format allowing reading levels without …","","","","","A dynamic trait describing a decompressed and decoded …","","A encoded and uncompressed dictionary page.","A <code>EncodedPage</code> is an uncompressed, encoded representation …","","","A <code>Page</code> is an uncompressed, encoded representation of a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a mutable reference to the internal buffer. Useful …","","","","","","","","","","","","","","","","","Compressed (and potentially encrypted) page size in bytes, …","","","The 32bit CRC for the page, to be be calculated as follows:","","","","","","","Encoding used for definition levels *","length of the definition levels","","","","","","","","","Encoding used for this data page *","Encoding used for data in this page *","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","whether the values are compressed. Which means the section …","","","","","","","","","","","","","","Number of NULL values, in this data page. Number of …","Number of rows in this data page. which means pages change …","","","","Number of values, including NULLs, in this data page. *","Number of values, including NULLs, in this data page. *","","","","","","","","","","","","","","","","","Encoding used for repetition levels *","length of the repetition levels","","Splits the page buffer into 3 slices corresponding to …","Splits the page buffer into 3 slices corresponding to …","Splits the page buffer into 3 slices corresponding to …","Decodes the raw statistics into a statistics","Decodes the raw statistics into a statistics","Optional statistics for the data in this page*","optional statistics for the data in this page *","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","the type of the page: indicates which of the *_header …","","","","","","","","","","","","","","","","Uncompressed page size in bytes (not including this …","","","","","","","","","","","","","","","","","","","A <code>FallibleStreamingIterator</code> that decompresses …","Trait describing a <code>MutStreamingIterator</code> of column chunks.","A <code>MutStreamingIterator</code> that reads column chunks one by one,","Decompressor that allows re-using the page buffer of …","","Iterator finished","","","Type declaration for a page filter","A page iterator iterates over row group’s pages. In …","A <code>MutStreamingIterator</code> of pre-read column chunks","Iterator still has elements","State of <code>MutStreamingIterator</code>.","","","","","","","","","","","","","","","","","","Decompresses the page, using <code>buffer</code> for decompression. If …","The field associated to the set of column chunks this …","","","Filters row group metadata to only those row groups, for …","","","","","","","","","","","","","","Returns a <code>ColumnIterator</code> of column chunks corresponding to …","Returns an <code>Iterator</code> of <code>ColumnChunkMetaData</code> corresponding …","Returns a new <code>PageIterator</code> by seeking <code>reader</code> to the …","Returns a stream of compressed data pages","","","","","","","","Returns two buffers: the first buffer corresponds to the …","Returns its internal buffer, consuming itself.","","","","Creates a new <code>Decompressor</code>.","Returns a new <code>BasicDecompressor</code>.","","","","","Reads a file’s metadata.","","","","","","","","","","","","","","","","","","","","","","","Returns the number of bits needed to store the given …","","","","","Represents a element inside a schema definition.","","","","","","","","","","DEPRECATED: When the schema is the result of a conversion …","","","When the original schema supports field ids, this will …","","","","","","","","","","","The logical type of this SchemaElement","Name of the field in the schema","","","Nested fields.  Since thrift does not support nested …","","","","repetition of the field. The root of the schema does not …","DEPRECATED: Used when this column contains decimal data. …","","","","","","","","","Data type for this field. Not set if the current element …","","","If type is FIXED_LEN_BYTE_ARRAY, this is the byte length …","","","","Parses message type as string into a Parquet <code>ParquetType</code> …","","","","","Common type information.","","An embedded BSON document","","","","","A Date","A decimal value.","Decimal logical type annotation","","","","an enum is converted into a binary field","","","","","","","","","","","","","","","","A signed integer value.","","Integer logical type annotation","An interval of time","","An embedded JSON document","","a list is converted into an optional field containing a …","","","","","a map is converted as an optional field containing a …","a key/value pair is converted into a group of two fields","","Representation of a Parquet type. Used to describe …","","","","","","","A time.","A time","Time logical type annotation","","A date/time combination","A date/time combination","Timestamp logical type annotation","Types supported by Parquet.  These types are intended to …","","","","","","An unsigned integer value.","","","","","","","","","","","","","","","","","","","","","","","","","","","Checks if <code>sub_type</code> schema is part of current schema. This …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns <code>BasicTypeInfo</code> information about the type.","","","","","","","","","Returns <code>true</code> if id is set, <code>false</code> otherwise.","","","","","","","","","","","","","","","","","","Returns field name.","Returns this type’s field name.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns <code>Repetition</code> value for the type. Returns <code>Optional</code> if …","","","","","","","","","","","","","","","","","","","","","Method to convert to Thrift.","","","","","","","","","","","","","","","Method to convert from Thrift.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Statistics per row group and per page All fields are …","","A trait used to describe specific statistics. Each …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Deserializes a raw parquet statistics into <code>Statistics</code>.","count of distinct values occurring","","","","","","","","","","","","","","","","","","","","","","","","","","","DEPRECATED: min and max value of the column. Use min_value …","Min and max values for the column, determined by its …","","","","","","","","","","","","","","","","","","","","","","count of null value in the column","","","","","","","","","","","","Serializes <code>Statistics</code> into a raw parquet statistics.","","","","","","","","","","","","","","","","","","","","","","","","","A physical native representation of a Parquet fixed-sized …","","","","","","","","A <code>FallibleStreamingIterator</code> that consumes <code>EncodedPage</code> and …","<code>DynIter</code> is an implementation of a single-threaded, …","Dynamically-typed <code>FallibleStreamingIterator</code>.","An interface to write a parquet file asynchronously. Use …","An interface to write a parquet file. Use <code>start</code> to write …","","","","The parquet version to use","Write options of different interfaces on this crate","","","","","","","","","","","","","","","","","","","","","","","","","Whether to use compression","","","Writes the footer of the parquet file. Returns the total …","Writes the footer of the parquet file. Returns the total …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a new <code>FileWriter</code>.","Returns a new <code>FileStreamer</code>.","","","","","The options assigned to the file","The options assigned to the file","The <code>SchemaDescriptor</code> assigned to this file","The <code>SchemaDescriptor</code> assigned to this file","","","Writes the header of the file","Writes the header of the file","","","","","","","","","","","","","","","","","","","","","","","","","","","Which Parquet version to use","Writes a row group to the file.","Writes a row group to the file.","Whether to write statistics"],"i":[1,0,1,1,1,1,1,0,1,0,0,1,1,1,1,1,1,1,1,0,1,1,0,1,0,0,1,1,1,0,1,1,0,0,2,0,2,2,2,2,2,2,2,2,2,2,2,0,0,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,0,3,3,3,3,0,3,3,0,3,3,0,0,0,3,3,3,0,3,0,3,0,3,3,3,3,3,0,0,0,0,4,4,4,4,0,0,4,4,4,4,4,4,4,4,4,4,4,0,5,5,5,0,5,5,5,5,5,5,5,5,5,5,0,6,6,6,6,6,6,6,6,6,6,6,6,0,7,7,0,7,7,7,7,7,7,7,7,7,7,7,0,8,0,0,0,8,0,9,10,8,11,9,10,8,11,10,11,10,11,0,0,8,10,8,11,9,10,8,11,9,10,8,11,9,10,11,8,9,10,11,9,10,11,10,9,11,10,11,9,10,8,11,9,10,8,11,9,10,8,11,12,13,13,0,14,14,14,14,14,14,14,14,14,14,14,14,0,0,0,0,15,16,0,16,16,15,15,16,0,0,15,15,15,16,15,16,15,16,15,16,15,15,16,16,15,16,16,16,16,15,15,16,15,16,16,15,16,15,16,15,16,17,18,19,20,18,20,0,0,0,0,0,0,0,21,0,22,22,21,21,23,24,23,22,25,26,27,21,24,23,22,25,26,27,21,24,24,23,22,25,26,27,21,24,23,22,25,26,27,21,26,27,24,25,25,26,27,24,26,24,25,24,24,24,23,22,21,27,24,24,24,23,22,25,26,27,21,24,23,22,25,26,27,21,0,24,24,24,23,22,25,26,27,21,24,25,26,25,25,23,23,23,27,23,22,24,23,25,26,27,26,27,26,25,24,23,24,23,25,25,25,22,24,24,23,22,25,26,27,21,26,24,23,22,25,26,27,21,27,24,26,24,23,22,25,26,27,21,24,23,24,23,22,25,26,27,21,24,25,28,0,0,0,0,29,30,31,0,32,0,0,0,0,32,29,30,31,0,32,0,0,0,32,0,0,0,0,33,33,34,35,36,37,38,39,40,35,36,37,41,42,43,33,44,29,30,31,32,38,39,40,35,36,37,41,42,43,33,44,29,30,31,32,44,44,44,38,39,40,33,44,32,38,39,40,33,44,32,38,39,40,40,43,43,40,40,40,45,38,39,44,38,39,43,44,44,40,45,38,39,44,38,39,38,39,40,32,38,39,40,35,36,37,41,42,43,33,44,29,30,31,32,38,39,40,35,36,37,41,42,43,33,44,29,30,31,32,38,39,40,32,43,44,40,38,39,40,35,36,37,41,42,43,33,44,29,30,31,32,43,39,38,39,40,38,39,40,35,36,37,41,42,43,44,39,39,43,33,44,38,39,35,38,39,40,34,35,36,37,0,38,39,40,45,38,39,44,38,39,36,0,0,0,43,44,38,39,38,39,40,38,39,40,33,44,32,38,39,40,35,36,37,41,42,43,33,44,29,30,31,32,32,38,39,40,35,36,37,41,42,43,33,44,29,30,31,32,40,38,39,40,35,36,37,41,42,43,33,44,29,30,31,32,40,43,35,36,37,38,39,40,38,39,40,46,47,48,49,50,51,52,53,0,0,0,0,54,55,54,0,0,0,0,55,0,54,56,57,58,59,56,57,60,58,55,59,56,57,60,58,55,59,0,61,58,59,0,55,59,56,57,60,58,55,59,54,56,57,58,59,0,0,0,0,56,57,60,58,55,59,60,56,57,60,60,0,56,57,60,58,59,60,0,0,60,56,57,60,58,55,59,56,57,60,58,55,59,56,57,60,58,55,59,62,63,0,64,64,0,64,0,65,64,65,64,65,64,65,64,65,65,65,64,65,65,64,65,64,65,64,65,64,0,0,65,65,65,65,65,65,65,65,65,65,65,65,64,65,64,64,65,64,65,65,64,65,0,65,65,0,66,66,67,66,0,68,69,68,67,67,66,69,69,0,68,67,66,69,66,66,68,68,0,70,66,66,66,67,69,68,69,68,69,69,68,0,69,67,69,67,71,0,67,72,72,71,71,72,0,0,0,70,67,67,67,69,69,0,0,69,69,0,0,67,67,69,69,69,69,69,73,66,74,72,75,76,73,67,68,77,69,71,70,66,74,72,75,76,73,67,68,77,69,71,70,70,66,74,72,75,76,73,67,68,77,69,71,70,66,74,72,75,76,73,67,68,77,69,71,70,66,74,72,75,76,73,67,0,0,66,74,72,75,76,73,67,68,77,69,71,70,66,74,72,75,76,73,67,68,77,69,71,70,66,66,66,74,72,75,76,73,67,68,77,69,71,70,70,70,70,0,66,74,72,75,76,73,67,77,66,74,72,75,76,73,67,68,77,69,71,70,75,76,77,70,73,77,70,66,74,72,75,76,73,67,68,77,69,70,74,75,76,73,77,70,66,74,72,75,76,73,67,0,74,0,66,74,72,75,76,73,67,77,74,66,74,72,75,76,73,67,66,74,72,75,76,73,67,68,77,69,71,70,70,66,74,72,75,76,73,67,68,77,69,71,70,70,70,70,66,74,72,75,76,73,67,68,77,69,71,70,66,74,72,75,76,73,67,68,77,69,71,70,0,75,76,66,74,72,75,76,73,67,66,74,72,75,76,73,67,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,91,92,92,91,92,91,93,94,94,95,96,97,0,0,0,0,0,0,98,99,100,101,102,103,99,100,101,102,103,99,100,101,102,103,99,100,101,102,103,99,100,101,102,103,103,99,101,102,0,103,99,100,101,102,98,103,99,100,101,102,103,99,100,101,102,103,99,100,101,102,103,103,99,100,101,102,103,103,99,100,101,102,103,103,99,100,101,102,103,99,100,101,102,103,98,99,100,101,102,103,99,100,101,102,103,98,99,100,101,102,103,0,103,103,99,100,101,102,103,99,100,101,102,103,99,100,101,102,103,99,100,101,102,103,103,104,0,104,0,104,0,104,104,0,0,0,0,0,0,0,105,105,0,0,106,107,106,108,109,110,111,107,112,105,106,108,109,110,111,107,112,105,109,112,105,112,105,0,112,109,109,108,110,112,105,112,105,106,108,109,110,111,107,112,105,109,109,106,107,112,105,106,108,109,110,111,107,112,105,111,112,106,108,110,111,107,106,111,108,110,108,110,111,107,108,110,112,105,106,108,109,110,111,107,112,105,106,108,109,110,111,107,112,105,106,108,109,110,111,107,112,105,112,108,110,112],"f":[null,null,null,[[],["result",4]],[[],["result",4,[["bool",15]]]],[[],["result",4,[["bool",15]]]],[[]],null,[[],["result",4,[["usize",15]]]],null,null,[[],["filter",3]],[[],["result",4,[["option",4]]]],[[],["result",4]],[[],["fuse",3]],[[],["option",4]],[[],["map",3]],[[],["maperr",3]],[[],["mapref",3]],null,[[],["result",4,[["option",4]]]],[[["usize",15]],["result",4,[["option",4]]]],null,[[],["result",4,[["option",4,[["usize",15]]]]]],null,null,[[]],[[["usize",15]],["skip",3]],[[],["skipwhile",3]],null,[[["usize",15]],["take",3]],[[],["takewhile",3]],null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[],["compression",4]],[[]],[[["compression",4],["vec",3]],["result",6]],[[["compression",4]],["result",6]],[[["compression",4]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[],["result",4]],[[["compressioncodec",3]],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[["usize",15]],["usize",15]],[[],["encoding",4]],[[]],null,null,null,[[["encoding",4]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[],["u32",15]],[[]],null,[[]],null,[[]],[[["parquetencoding",3]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,[[]],[[]],[[],["decoder",3]],[[]],[[["u8",15]],["usize",15]],[[["u8",15]],["usize",15]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[["u8",15],["usize",15]]],[[],["option",4]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[]],[[]],[[],["usize",15]],[[["iterator",8],["vec",3]]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[],["option",4]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[]],[[]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[],["decoder",3]],[[]],[[],["option",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[]],[[]],[[["",26,[["iterator",8],["clone",8]]],["vec",3]]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[],["option",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,null,null,null,[[["iterator",8]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["decoder",3]],[[],["hybridrledecoder",3]],[[]],[[]],[[["iterator",8]],["result",6]],[[["iterator",8],["u8",15]],["result",6]],[[["hybridencoded",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["hybridencoded",4]],["bool",15]],[[["usize",15],["usize",15]]],[[["u32",15]]],[[["u32",15],["usize",15]]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["u32",15]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,[[]],[[]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[["usize",15]]],[[],["option",4]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[["u64",15]],["usize",15]],[[]],[[["i64",15]]],null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[],["feature",4]],[[],["parqueterror",4]],[[]],[[]],[[["feature",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["error",3]],["parqueterror",4]],[[["error",4]],["parqueterror",4]],[[["error",4]],["parqueterror",4]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["parquettype",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["columnchunkmetadata",3]],[[],["columndescriptor",3]],[[],["columnorder",4]],[[],["filemetadata",3]],[[],["rowgroupmetadata",3]],[[],["schemadescriptor",3]],[[],["sortorder",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]],["columnchunkmetadata",3]],[[["usize",15]],["columndescriptor",3]],[[],["vec",3]],[[["usize",15]],["columnorder",4]],null,[[]],[[]],[[],["i64",15]],[[],["i64",15]],[[],["compression",4]],null,[[],["i64",15]],[[],["columndescriptor",3]],[[],["option",4,[["i64",15]]]],[[["columndescriptor",3]],["bool",15]],[[["columnorder",4]],["bool",15]],[[["sortorder",4]],["bool",15]],[[]],[[],["i64",15]],[[],["option",4]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["option",4],["option",4],["physicaltype",4]],["sortorder",4]],[[],["bool",15]],[[],["option",4,[["i64",15]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["columnchunk",3]],[[],["result",6,[["filemetadata",3]]]],[[],["rowgroup",3]],[[],["option",4]],null,[[],["i16",15]],[[],["i16",15]],[[],["str",15]],[[],["str",15]],[[["columndescriptor",3]],["bool",15]],[[["columnorder",4]],["bool",15]],[[["columnchunk",3],["columndescriptor",3]]],[[["parquettype",4],["i16",15],["i16",15],["vec",3,[["string",3]]],["parquettype",4]]],[[["i32",15],["i64",15],["option",4,[["string",3]]],["vec",3,[["rowgroupmetadata",3]]],["option",4,[["vec",3,[["keyvalue",6]]]]],["schemadescriptor",3],["option",4,[["vec",3,[["columnorder",4]]]]]]],[[["vec",3,[["columnchunkmetadata",3]]],["i64",15],["i64",15]],["rowgroupmetadata",3]],[[["string",3],["vec",3,[["parquettype",4]]]]],[[],["usize",15]],[[],["usize",15]],[[],["i64",15]],null,[[],["i64",15]],[[]],[[],["physicaltype",4]],[[],["physicaltype",4]],null,[[],["schemadescriptor",3]],null,[[],["sortorder",4]],[[],["option",4,[["result",6,[["arc",3,[["statistics",8]]]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["i64",15]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",6]],[[["columndescriptor",3],["columnchunk",3]],["result",6]],[[["schemadescriptor",3],["rowgroup",3]],["result",6,[["rowgroupmetadata",3]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["type",3]],[[],["parquettype",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["i64",15]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["vec",3]],[[],["vec",3]],[[],["datapageheader",3]],[[],["datapageheaderv2",3]],[[],["pageheader",3]],[[],["datapageheader",4]],[[],["datapage",3]],[[],["pagetype",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[["datapageheader",3]],["ordering",4]],[[["datapageheaderv2",3]],["ordering",4]],[[["pageheader",3]],["ordering",4]],null,[[],["usize",15]],[[],["compression",4]],null,null,null,[[],["encoding",4]],[[],["encoding",4]],[[],["encoding",4]],[[],["encoding",4]],null,null,[[],["columndescriptor",3]],[[],["columndescriptor",3]],[[],["option",4,[["arc",3]]]],null,[[],["encoding",4]],[[],["encoding",4]],[[],["encoding",4]],[[],["encoding",4]],null,null,[[["datapageheader",3]],["bool",15]],[[["datapageheaderv2",3]],["bool",15]],[[["pageheader",3]],["bool",15]],[[["pagetype",4]],["bool",15]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["datapageheader",4]],[[],["datapageheader",4]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],null,[[["datapageheader",3]],["bool",15]],[[["datapageheaderv2",3]],["bool",15]],[[["pageheader",3]],["bool",15]],[[["i32",15],["encoding",3],["encoding",3],["encoding",3]],["datapageheader",3]],[[["i32",15],["i32",15],["i32",15],["encoding",3],["i32",15],["i32",15]],["datapageheaderv2",3]],[[["pagetype",3],["i32",15],["i32",15]],["pageheader",3]],[[["vec",3,[["u8",15]]],["vec",3,[["i32",15]]]]],[[["vec",3,[["u8",15]]],["physicaltype",4],["usize",15]]],[[["vec",3]]],[[["vec",3,[["u8",15]]],["usize",15]]],[[["vec",3,[["u8",15]]],["usize",15],["usize",15]]],[[["datapageheader",4],["vec",3,[["u8",15]]],["compression",4],["usize",15],["option",4,[["arc",3,[["dictpage",8]]]]],["columndescriptor",3]]],[[["datapageheader",4],["vec",3,[["u8",15]]],["option",4,[["arc",3,[["dictpage",8]]]]],["columndescriptor",3]]],null,null,[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],null,null,[[]],[[["datapageheader",3]],["option",4,[["ordering",4]]]],[[["datapageheaderv2",3]],["option",4,[["ordering",4]]]],[[["pageheader",3]],["option",4,[["ordering",4]]]],[[],["physicaltype",4]],[[],["physicaltype",4]],[[],["physicaltype",4]],[[],["physicaltype",4]],[[["encodeddictpage",3],["bool",15],["physicaltype",4]],["result",6,[["arc",3,[["dictpage",8]]]]]],[[],["result",4,[["datapageheader",3],["error",4]]]],[[],["result",4,[["datapageheaderv2",3],["error",4]]]],[[],["result",4,[["pageheader",3],["error",4]]]],[[],["encoding",4]],[[],["encoding",4]],[[],["encoding",4]],[[],["encoding",4]],null,null,[[],["usize",15]],[[["datapage",3],["columndescriptor",3]]],[[["bool",15],["bool",15]]],[[["usize",15],["usize",15]]],[[],["option",4,[["result",6,[["arc",3,[["statistics",8]]]]]]]],[[],["option",4,[["result",6,[["arc",3,[["statistics",8]]]]]]]],null,null,[[["tinputstreamprotocol",8]]],[[["tinputstreamprotocol",8]]],[[["tinputstreamprotocol",8]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["parquetpagetype",3]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,[[],["usize",15]],[[]],[[]],[[]],[[],["result",4,[["usize",15],["error",4]]]],[[],["result",4,[["usize",15],["error",4]]]],[[],["result",4,[["usize",15],["error",4]]]],[[["toutputstreamprotocol",8]]],[[["toutputstreamprotocol",8]]],[[["toutputstreamprotocol",8]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["result",4,[["state",4]]]],[[],["result",6]],[[],["result",6]],[[],["result",6,[["state",4]]]],[[],["result",6,[["state",4]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["compresseddatapage",3],["vec",3]],["result",6,[["datapage",3]]]],[[],["parquettype",4]],[[],["parquettype",4]],[[],["parquettype",4]],[[["filemetadata",3],["fn",8]],["filemetadata",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[["",26,[["read",8],["seek",8]]],["filemetadata",3],["usize",15],["usize",15],["option",4,[["pagefilter",6]]],["vec",3,[["u8",15]]]],["columniterator",3,[["",26,[["read",8],["seek",8]]]]]],[[["filemetadata",3],["usize",15],["parquettype",4]]],[[["columnchunkmetadata",3],["",26,[["read",8],["seek",8]]],["option",4,[["pagefilter",6]]],["vec",3,[["u8",15]]]],["result",6,[["pageiterator",3,[["",26,[["read",8],["seek",8]]]]]]]],[[["columnchunkmetadata",3],["vec",3,[["u8",15]]],["pagefilter",6]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["vec",3,[["u8",15]]]],[[]],[[],["vec",3,[["u8",15]]]],[[]],[[]],null,[[["pageiterator",3],["vec",3,[["u8",15]]]]],[[["vec",3,[["u8",15]]]]],[[["i64",15],["compression",4],["columndescriptor",3],["pagefilter",6],["vec",3,[["u8",15]]]]],[[["parquettype",4],["vec",3,[["columnchunkmetadata",3]]],["option",4,[["pagefilter",6]]],["vec",3,[["u8",15]]]]],[[["parquettype",4],["vec",3]]],[[],["option",4]],[[],["result",6,[["filemetadata",3]]]],[[]],[[["vec",3,[["u8",15]]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,[[["i16",15]],["u32",15]],null,null,null,null,null,[[]],[[]],[[]],[[]],[[],["schemaelement",3]],[[],["repetition",4]],[[]],[[]],[[["schemaelement",3]],["ordering",4]],null,[[["schemaelement",3]],["bool",15]],[[["repetition",4]],["bool",15]],null,[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,[[["schemaelement",3]],["bool",15]],[[["string",3]],["schemaelement",3]],null,[[["schemaelement",3]],["option",4,[["ordering",4]]]],null,[[],["result",4,[["schemaelement",3],["error",4]]]],null,null,[[["tinputstreamprotocol",8]]],[[]],[[]],[[],["result",4]],[[["fieldrepetitiontype",3]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,[[],["typeid",3]],[[],["typeid",3]],null,null,[[],["result",4,[["usize",15],["error",4]]]],[[["toutputstreamprotocol",8]]],[[["str",15]],["result",6,[["parquettype",4]]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["parquettype",4]],["bool",15]],[[],["type",3]],[[],["decimaltype",3]],[[],["timeunit",4]],[[],["timestamptype",3]],[[],["timetype",3]],[[],["inttype",3]],[[],["logicaltype",4]],[[],["physicaltype",4]],[[],["basictypeinfo",3]],[[],["primitiveconvertedtype",4]],[[],["groupconvertedtype",4]],[[],["parquettype",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["type",3]],["ordering",4]],[[["decimaltype",3]],["ordering",4]],[[["timeunit",4]],["ordering",4]],[[["timestamptype",3]],["ordering",4]],[[["timetype",3]],["ordering",4]],[[["inttype",3]],["ordering",4]],[[["logicaltype",4]],["ordering",4]],[[["convertedtype",3]],["result",6,[["groupconvertedtype",4]]]],[[["convertedtype",3],["option",4]],["result",6,[["primitiveconvertedtype",4]]]],[[["type",3]],["bool",15]],[[["decimaltype",3]],["bool",15]],[[["timeunit",4]],["bool",15]],[[["timestamptype",3]],["bool",15]],[[["timetype",3]],["bool",15]],[[["inttype",3]],["bool",15]],[[["logicaltype",4]],["bool",15]],[[["physicaltype",4]],["bool",15]],[[["basictypeinfo",3]],["bool",15]],[[["primitiveconvertedtype",4]],["bool",15]],[[["groupconvertedtype",4]],["bool",15]],[[["parquettype",4]],["bool",15]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["i32",15]],["type",3]],[[["i32",15]],["type",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["string",3],["vec",3,[["parquettype",4]]],["option",4,[["repetition",4]]],["option",4,[["groupconvertedtype",4]]],["option",4,[["i32",15]]]]],[[["string",3],["physicaltype",4]]],[[],["basictypeinfo",3]],[[["groupconvertedtype",4]],["convertedtype",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[],["bool",15]],[[],["bool",15]],null,[[],["str",15]],[[],["str",15]],[[["type",3]],["bool",15]],[[["decimaltype",3]],["bool",15]],[[["timeunit",4]],["bool",15]],[[["timestamptype",3]],["bool",15]],[[["timetype",3]],["bool",15]],[[["inttype",3]],["bool",15]],[[["logicaltype",4]],["bool",15]],[[["physicaltype",4]],["bool",15]],[[["basictypeinfo",3]],["bool",15]],[[["primitiveconvertedtype",4]],["bool",15]],[[["parquettype",4]],["bool",15]],[[["i32",15],["i32",15]],["decimaltype",3]],[[["bool",15],["timeunit",4]],["timestamptype",3]],[[["bool",15],["timeunit",4]],["timetype",3]],[[["i8",15],["bool",15]],["inttype",3]],[[["string",3],["repetition",4],["option",4,[["i32",15]]],["bool",15]]],[[["string",3],["vec",3,[["parquettype",4]]]]],[[["type",3]],["option",4,[["ordering",4]]]],[[["decimaltype",3]],["option",4,[["ordering",4]]]],[[["timeunit",4]],["option",4,[["ordering",4]]]],[[["timestamptype",3]],["option",4,[["ordering",4]]]],[[["timetype",3]],["option",4,[["ordering",4]]]],[[["inttype",3]],["option",4,[["ordering",4]]]],[[["logicaltype",4]],["option",4,[["ordering",4]]]],[[["physicaltype",4]]],null,[[["primitiveconvertedtype",4]]],[[],["result",4,[["type",3],["error",4]]]],[[],["result",4,[["decimaltype",3],["error",4]]]],[[],["result",4,[["timeunit",4],["error",4]]]],[[],["result",4,[["timestamptype",3],["error",4]]]],[[],["result",4,[["timetype",3],["error",4]]]],[[],["result",4,[["inttype",3],["error",4]]]],[[],["result",4,[["logicaltype",4],["error",4]]]],[[],["repetition",4]],null,[[["tinputstreamprotocol",8]]],[[["tinputstreamprotocol",8]]],[[["tinputstreamprotocol",8]]],[[["tinputstreamprotocol",8]]],[[["tinputstreamprotocol",8]]],[[["tinputstreamprotocol",8]]],[[["tinputstreamprotocol",8]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",6,[["vec",3,[["schemaelement",3]]]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["string",3],["repetition",4],["option",4,[["groupconvertedtype",4]]],["option",4,[["logicaltype",4]]],["vec",3,[["parquettype",4]]],["option",4,[["i32",15]]]],["result",6]],[[["string",3],["physicaltype",4],["repetition",4],["option",4,[["primitiveconvertedtype",4]]],["option",4,[["logicaltype",4]]],["option",4,[["i32",15]]]],["result",6]],[[],["result",6,[["parquettype",4]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["type",3],["option",4,[["i32",15]]]],["result",6,[["physicaltype",4]]]],null,null,[[],["result",4,[["usize",15],["error",4]]]],[[],["result",4,[["usize",15],["error",4]]]],[[],["result",4,[["usize",15],["error",4]]]],[[],["result",4,[["usize",15],["error",4]]]],[[],["result",4,[["usize",15],["error",4]]]],[[],["result",4,[["usize",15],["error",4]]]],[[],["result",4,[["usize",15],["error",4]]]],[[["toutputstreamprotocol",8]]],[[["toutputstreamprotocol",8]]],[[["toutputstreamprotocol",8]]],[[["toutputstreamprotocol",8]]],[[["toutputstreamprotocol",8]]],[[["toutputstreamprotocol",8]]],[[["toutputstreamprotocol",8]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["statistics",3]],[[],["binarystatistics",3]],[[],["booleanstatistics",3]],[[],["fixedlenstatistics",3]],[[],["primitivestatistics",3]],[[]],[[]],[[]],[[]],[[]],[[["statistics",3]],["ordering",4]],[[],["statistics",3]],null,null,null,[[["parquetstatistics",3],["columndescriptor",3]],["result",6,[["arc",3,[["statistics",8]]]]]],null,null,null,null,null,[[],["bool",15]],[[["statistics",3]],["bool",15]],[[["binarystatistics",3]],["bool",15]],[[["booleanstatistics",3]],["bool",15]],[[["fixedlenstatistics",3]],["bool",15]],[[["primitivestatistics",3]],["bool",15]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,[[["statistics",3]],["bool",15]],[[["binarystatistics",3]],["bool",15]],[[["booleanstatistics",3]],["bool",15]],[[["fixedlenstatistics",3]],["bool",15]],[[["primitivestatistics",3]],["bool",15]],[[],["statistics",3]],[[],["option",4,[["i64",15]]]],[[],["option",4,[["i64",15]]]],[[],["option",4,[["i64",15]]]],[[],["option",4,[["i64",15]]]],[[],["option",4,[["i64",15]]]],null,null,null,null,null,[[["statistics",3]],["option",4,[["ordering",4]]]],[[],["physicaltype",4]],[[],["physicaltype",4]],[[],["physicaltype",4]],[[],["physicaltype",4]],[[],["physicaltype",4]],[[],["result",4,[["statistics",3],["error",4]]]],[[["statistics",8]],["parquetstatistics",3]],[[["tinputstreamprotocol",8]]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["result",4,[["usize",15],["error",4]]]],[[["toutputstreamprotocol",8]]],null,null,null,[[],["nativetype",8]],[[]],[[],["i64",15]],[[],["ordering",4]],[[]],null,null,null,null,null,null,null,null,null,null,null,[[],["result",4]],[[],["result",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["option",4,[["i64",15]]]],[[],["writeoptions",3]],[[],["version",4]],[[]],[[]],[[["encodedpage",4],["vec",3,[["u8",15]]],["compression",4]],["result",6,[["compressedpage",4]]]],null,null,null,[[["option",4,[["vec",3,[["keyvalue",6]]]]]],["result",6]],[[["option",4,[["vec",3,[["keyvalue",6]]]]]]],[[["writeoptions",3]],["bool",15]],[[["version",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["columnchunk",3]],["columnoffsetsmetadata",3]],[[["columnchunkmetadata",3]],["columnoffsetsmetadata",3]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["writeoptions",3]],["bool",15]],[[["compression",4],["vec",3,[["u8",15]]]]],[[["schemadescriptor",3],["writeoptions",3],["option",4,[["string",3]]]]],[[["schemadescriptor",3],["writeoptions",3],["option",4,[["string",3]]]]],[[]],[[]],[[["compression",4],["vec",3,[["u8",15]]]]],[[],["option",4]],[[],["writeoptions",3]],[[],["writeoptions",3]],[[],["schemadescriptor",3]],[[],["schemadescriptor",3]],[[]],[[]],[[],["result",6]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,[[["rowgroupiter",6],["usize",15]],["result",6]],[[["rowgroupiter",6],["usize",15]]],null],"p":[[8,"FallibleStreamingIterator"],[4,"Compression"],[4,"Encoding"],[3,"Decoder"],[3,"Decoder"],[3,"Decoder"],[3,"Decoder"],[4,"HybridEncoded"],[3,"BitmapIter"],[3,"Decoder"],[3,"HybridRleDecoder"],[13,"Bitpacked"],[13,"Rle"],[3,"Decoder"],[4,"Feature"],[4,"ParquetError"],[13,"General"],[13,"FeatureNotActive"],[13,"OutOfSpec"],[13,"External"],[4,"SortOrder"],[4,"ColumnOrder"],[3,"ColumnDescriptor"],[3,"ColumnChunkMetaData"],[3,"FileMetaData"],[3,"RowGroupMetaData"],[3,"SchemaDescriptor"],[13,"TypeDefinedOrder"],[4,"Page"],[4,"EncodedPage"],[4,"CompressedPage"],[4,"PageType"],[4,"DataPageHeader"],[8,"DictPage"],[3,"BinaryPageDict"],[3,"FixedLenByteArrayPageDict"],[3,"PrimitivePageDict"],[3,"DataPageHeaderV1"],[3,"DataPageHeaderV2"],[3,"ParquetPageHeader"],[3,"EncodedDictPage"],[3,"CompressedDictPage"],[3,"CompressedDataPage"],[3,"DataPage"],[8,"DataPageHeaderExt"],[13,"Data"],[13,"Dict"],[13,"V1"],[13,"V2"],[13,"Data"],[13,"Dict"],[13,"Data"],[13,"Dict"],[8,"MutStreamingIterator"],[4,"State"],[3,"Decompressor"],[3,"BasicDecompressor"],[3,"ColumnIterator"],[3,"ReadColumnIterator"],[3,"PageIterator"],[8,"ColumnChunkIter"],[13,"Some"],[13,"Finished"],[4,"Repetition"],[3,"SchemaElement"],[3,"Type"],[4,"LogicalType"],[4,"PhysicalType"],[4,"PrimitiveConvertedType"],[4,"ParquetType"],[4,"GroupConvertedType"],[4,"TimeUnit"],[3,"IntType"],[3,"DecimalType"],[3,"TimestampType"],[3,"TimeType"],[3,"BasicTypeInfo"],[13,"STRING"],[13,"MAP"],[13,"LIST"],[13,"ENUM"],[13,"DECIMAL"],[13,"DATE"],[13,"TIME"],[13,"TIMESTAMP"],[13,"INTEGER"],[13,"UNKNOWN"],[13,"JSON"],[13,"BSON"],[13,"UUID"],[13,"PrimitiveType"],[13,"GroupType"],[13,"FixedLenByteArray"],[13,"Decimal"],[13,"MILLIS"],[13,"MICROS"],[13,"NANOS"],[8,"Statistics"],[3,"BinaryStatistics"],[3,"BooleanStatistics"],[3,"FixedLenStatistics"],[3,"PrimitiveStatistics"],[3,"ParquetStatistics"],[8,"NativeType"],[4,"Version"],[3,"Compressor"],[3,"DynStreamingIterator"],[3,"FileWriter"],[3,"ColumnOffsetsMetadata"],[3,"FileStreamer"],[3,"DynIter"],[3,"WriteOptions"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};